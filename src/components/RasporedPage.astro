---
import "@styles/global.css";
import TimeSlotEntry from "./raspored/TimeSlotEntry";
import Footer from "./Footer";

const times = [];
const START_HOUR = 9;
const END_HOUR = 19; // INCLUSIVE

const TIME_SLOT_HEIGHT = 64; // Height of each time slot in pixels
const TIME_LINE_HEIGHT = 2;

for (let hour = START_HOUR; hour < END_HOUR; hour++) {
    times.push(`${hour.toString().padStart(2, "0")}:00`);
    times.push(`${hour.toString().padStart(2, "0")}:30`);
    // TODO: make the end our inclusive
}

export type EventInfo = {
    start: string;
    end: string;
    title: string;
    type: "tech" | "policy" | "keynote" | "neutral",
    speaker?: string,
}
// Example events with start and end times
const events: EventInfo[] = [
    {
        start: "09:00",
        end: "09:30",
        title: "Otvorenje",
        type: "neutral",
    },
    {
        start: "09:30",
        end: "10:30",
        title: "Raspadanje atoma i hakiranje mrkve",
        type: "tech",
        speaker: "Ivan Ivanic"
    },
    {
        start: "10:30",
        end: "11:30",
        title: "Kako tupim nozem hakirati zlocesti toster?",
        type: "tech",
        speaker: "Marko markic"
    },
    {
        start: "12:30",
        end: "14:00",
        title: "Some very long event name so that it maybe doesnt fit in the raspored text-box",
        type: "policy",
        speaker: "Ludomir ludic"
    },
    {
        start: "11:30",
        end: "12:30",
        title: "Keynote",
        type: "keynote",
        speaker: "Drazenka zecic"
    },
];

// Calculate the top and height for each event
const calculateEventStyle = (start: string, end: string) => {
    const startMinutes =
        parseInt(start.split(":")[0]) * 60 + parseInt(start.split(":")[1]);
    const endMinutes =
        parseInt(end.split(":")[0]) * 60 + parseInt(end.split(":")[1]);
    const startTime = START_HOUR * 60; // 9:00 AM in minutes
    const totalMinutes = (END_HOUR - START_HOUR) * 60;

    const top =
        ((startMinutes - startTime) / totalMinutes) *
        (TIME_SLOT_HEIGHT * times.length);
    const height =
        ((endMinutes - startMinutes) / totalMinutes) *
            (TIME_SLOT_HEIGHT * times.length) +
        TIME_LINE_HEIGHT;

    return { top: `${top}px`, height: `${height}px` };
};
---

<div class="w-full px-5 lg:mx-auto xl:w-2/3 mb-10">
    <div class="timetable relative flex my-20 gap-x-5">
        <div class="flex flex-col">
            {
                times.map((time) => (
                    <div
                        style={{
                            height: `${TIME_SLOT_HEIGHT}px`,
                        }}
                    >
                        <div class="time text-xl font-semibold text-gray-500 font-open-sans flex items-center -translate-y-1/2">
                            {time}
                        </div>
                    </div>
                ))
            }
        </div>
        <div class="w-full relative">
            {
                times.map((_, index) => (
                    <div
                        class="absolute w-full border-t border-gray-600"
                        style={{
                            top: `${TIME_SLOT_HEIGHT * index}px`,
                            height: `${TIME_SLOT_HEIGHT}px`,
                            borderTopWidth: `${TIME_LINE_HEIGHT}px`,
                        }}
                    />
                ))
            }
            {
                events.map((event) => {
                    const style = calculateEventStyle(event.start, event.end);
                    return (<TimeSlotEntry event={event} style={style}/>)
                })
            }
        </div>
    </div>
    <Footer />
</div>

<style>
    .timetable {
        height: calc(
            (19 - 9) * 2 * `${TIME_SLOT_HEIGHT}px`
        ); /* Adjust height based on the number of time slots */
    }
</style>
